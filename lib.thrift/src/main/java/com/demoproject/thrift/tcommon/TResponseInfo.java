/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.demoproject.thrift.tcommon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-02-25")
public class TResponseInfo implements org.apache.thrift.TBase<TResponseInfo, TResponseInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TResponseInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResponseInfo");

  private static final org.apache.thrift.protocol.TField PLAYER_ID_RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("playerIdReceive", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("messageData", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResponseInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResponseInfoTupleSchemeFactory());
  }

  public List<String> playerIdReceive; // required
  public int length; // required
  public ByteBuffer messageData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAYER_ID_RECEIVE((short)1, "playerIdReceive"),
    LENGTH((short)2, "length"),
    MESSAGE_DATA((short)3, "messageData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAYER_ID_RECEIVE
          return PLAYER_ID_RECEIVE;
        case 2: // LENGTH
          return LENGTH;
        case 3: // MESSAGE_DATA
          return MESSAGE_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LENGTH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAYER_ID_RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("playerIdReceive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE_DATA, new org.apache.thrift.meta_data.FieldMetaData("messageData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResponseInfo.class, metaDataMap);
  }

  public TResponseInfo() {
  }

  public TResponseInfo(
    List<String> playerIdReceive,
    int length,
    ByteBuffer messageData)
  {
    this();
    this.playerIdReceive = playerIdReceive;
    this.length = length;
    setLengthIsSet(true);
    this.messageData = org.apache.thrift.TBaseHelper.copyBinary(messageData);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResponseInfo(TResponseInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlayerIdReceive()) {
      List<String> __this__playerIdReceive = new ArrayList<String>(other.playerIdReceive);
      this.playerIdReceive = __this__playerIdReceive;
    }
    this.length = other.length;
    if (other.isSetMessageData()) {
      this.messageData = org.apache.thrift.TBaseHelper.copyBinary(other.messageData);
    }
  }

  public TResponseInfo deepCopy() {
    return new TResponseInfo(this);
  }

  @Override
  public void clear() {
    this.playerIdReceive = null;
    setLengthIsSet(false);
    this.length = 0;
    this.messageData = null;
  }

  public int getPlayerIdReceiveSize() {
    return (this.playerIdReceive == null) ? 0 : this.playerIdReceive.size();
  }

  public java.util.Iterator<String> getPlayerIdReceiveIterator() {
    return (this.playerIdReceive == null) ? null : this.playerIdReceive.iterator();
  }

  public void addToPlayerIdReceive(String elem) {
    if (this.playerIdReceive == null) {
      this.playerIdReceive = new ArrayList<String>();
    }
    this.playerIdReceive.add(elem);
  }

  public List<String> getPlayerIdReceive() {
    return this.playerIdReceive;
  }

  public TResponseInfo setPlayerIdReceive(List<String> playerIdReceive) {
    this.playerIdReceive = playerIdReceive;
    return this;
  }

  public void unsetPlayerIdReceive() {
    this.playerIdReceive = null;
  }

  /** Returns true if field playerIdReceive is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerIdReceive() {
    return this.playerIdReceive != null;
  }

  public void setPlayerIdReceiveIsSet(boolean value) {
    if (!value) {
      this.playerIdReceive = null;
    }
  }

  public int getLength() {
    return this.length;
  }

  public TResponseInfo setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public byte[] getMessageData() {
    setMessageData(org.apache.thrift.TBaseHelper.rightSize(messageData));
    return messageData == null ? null : messageData.array();
  }

  public ByteBuffer bufferForMessageData() {
    return org.apache.thrift.TBaseHelper.copyBinary(messageData);
  }

  public TResponseInfo setMessageData(byte[] messageData) {
    this.messageData = messageData == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(messageData, messageData.length));
    return this;
  }

  public TResponseInfo setMessageData(ByteBuffer messageData) {
    this.messageData = org.apache.thrift.TBaseHelper.copyBinary(messageData);
    return this;
  }

  public void unsetMessageData() {
    this.messageData = null;
  }

  /** Returns true if field messageData is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageData() {
    return this.messageData != null;
  }

  public void setMessageDataIsSet(boolean value) {
    if (!value) {
      this.messageData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAYER_ID_RECEIVE:
      if (value == null) {
        unsetPlayerIdReceive();
      } else {
        setPlayerIdReceive((List<String>)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    case MESSAGE_DATA:
      if (value == null) {
        unsetMessageData();
      } else {
        setMessageData((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAYER_ID_RECEIVE:
      return getPlayerIdReceive();

    case LENGTH:
      return getLength();

    case MESSAGE_DATA:
      return getMessageData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAYER_ID_RECEIVE:
      return isSetPlayerIdReceive();
    case LENGTH:
      return isSetLength();
    case MESSAGE_DATA:
      return isSetMessageData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResponseInfo)
      return this.equals((TResponseInfo)that);
    return false;
  }

  public boolean equals(TResponseInfo that) {
    if (that == null)
      return false;

    boolean this_present_playerIdReceive = true && this.isSetPlayerIdReceive();
    boolean that_present_playerIdReceive = true && that.isSetPlayerIdReceive();
    if (this_present_playerIdReceive || that_present_playerIdReceive) {
      if (!(this_present_playerIdReceive && that_present_playerIdReceive))
        return false;
      if (!this.playerIdReceive.equals(that.playerIdReceive))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_messageData = true && this.isSetMessageData();
    boolean that_present_messageData = true && that.isSetMessageData();
    if (this_present_messageData || that_present_messageData) {
      if (!(this_present_messageData && that_present_messageData))
        return false;
      if (!this.messageData.equals(that.messageData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_playerIdReceive = true && (isSetPlayerIdReceive());
    list.add(present_playerIdReceive);
    if (present_playerIdReceive)
      list.add(playerIdReceive);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    boolean present_messageData = true && (isSetMessageData());
    list.add(present_messageData);
    if (present_messageData)
      list.add(messageData);

    return list.hashCode();
  }

  @Override
  public int compareTo(TResponseInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlayerIdReceive()).compareTo(other.isSetPlayerIdReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerIdReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerIdReceive, other.playerIdReceive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageData()).compareTo(other.isSetMessageData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageData, other.messageData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResponseInfo(");
    boolean first = true;

    sb.append("playerIdReceive:");
    if (this.playerIdReceive == null) {
      sb.append("null");
    } else {
      sb.append(this.playerIdReceive);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageData:");
    if (this.messageData == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.messageData, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResponseInfoStandardSchemeFactory implements SchemeFactory {
    public TResponseInfoStandardScheme getScheme() {
      return new TResponseInfoStandardScheme();
    }
  }

  private static class TResponseInfoStandardScheme extends StandardScheme<TResponseInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResponseInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAYER_ID_RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.playerIdReceive = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.playerIdReceive.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPlayerIdReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length = iprot.readI32();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageData = iprot.readBinary();
              struct.setMessageDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResponseInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.playerIdReceive != null) {
        oprot.writeFieldBegin(PLAYER_ID_RECEIVE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.playerIdReceive.size()));
          for (String _iter3 : struct.playerIdReceive)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(struct.length);
      oprot.writeFieldEnd();
      if (struct.messageData != null) {
        oprot.writeFieldBegin(MESSAGE_DATA_FIELD_DESC);
        oprot.writeBinary(struct.messageData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResponseInfoTupleSchemeFactory implements SchemeFactory {
    public TResponseInfoTupleScheme getScheme() {
      return new TResponseInfoTupleScheme();
    }
  }

  private static class TResponseInfoTupleScheme extends TupleScheme<TResponseInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResponseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlayerIdReceive()) {
        optionals.set(0);
      }
      if (struct.isSetLength()) {
        optionals.set(1);
      }
      if (struct.isSetMessageData()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPlayerIdReceive()) {
        {
          oprot.writeI32(struct.playerIdReceive.size());
          for (String _iter4 : struct.playerIdReceive)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetLength()) {
        oprot.writeI32(struct.length);
      }
      if (struct.isSetMessageData()) {
        oprot.writeBinary(struct.messageData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResponseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.playerIdReceive = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.playerIdReceive.add(_elem6);
          }
        }
        struct.setPlayerIdReceiveIsSet(true);
      }
      if (incoming.get(1)) {
        struct.length = iprot.readI32();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.messageData = iprot.readBinary();
        struct.setMessageDataIsSet(true);
      }
    }
  }

}

