/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.demoproject.thrift.account;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-02-25")
public class TAccount implements org.apache.thrift.TBase<TAccount, TAccount._Fields>, java.io.Serializable, Cloneable, Comparable<TAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAccount");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DISPLAYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AVATAR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarURL", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LASTED_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("lastedLogin", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField VERIFIED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("verifiedAt", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAccountTupleSchemeFactory());
  }

  public int id; // required
  public String username; // required
  public String displayname; // required
  public String password; // required
  public String status; // required
  public String avatarURL; // required
  public String note; // required
  public String address; // required
  public String phone; // required
  public String platform; // required
  public long lastedLogin; // required
  public long verifiedAt; // required
  public String createdAt; // required
  public String updatedAt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USERNAME((short)2, "username"),
    DISPLAYNAME((short)3, "displayname"),
    PASSWORD((short)4, "password"),
    STATUS((short)5, "status"),
    AVATAR_URL((short)6, "avatarURL"),
    NOTE((short)7, "note"),
    ADDRESS((short)8, "address"),
    PHONE((short)9, "phone"),
    PLATFORM((short)10, "platform"),
    LASTED_LOGIN((short)11, "lastedLogin"),
    VERIFIED_AT((short)12, "verifiedAt"),
    CREATED_AT((short)13, "createdAt"),
    UPDATED_AT((short)14, "updatedAt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // DISPLAYNAME
          return DISPLAYNAME;
        case 4: // PASSWORD
          return PASSWORD;
        case 5: // STATUS
          return STATUS;
        case 6: // AVATAR_URL
          return AVATAR_URL;
        case 7: // NOTE
          return NOTE;
        case 8: // ADDRESS
          return ADDRESS;
        case 9: // PHONE
          return PHONE;
        case 10: // PLATFORM
          return PLATFORM;
        case 11: // LASTED_LOGIN
          return LASTED_LOGIN;
        case 12: // VERIFIED_AT
          return VERIFIED_AT;
        case 13: // CREATED_AT
          return CREATED_AT;
        case 14: // UPDATED_AT
          return UPDATED_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __LASTEDLOGIN_ISSET_ID = 1;
  private static final int __VERIFIEDAT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAYNAME, new org.apache.thrift.meta_data.FieldMetaData("displayname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR_URL, new org.apache.thrift.meta_data.FieldMetaData("avatarURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTED_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("lastedLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERIFIED_AT, new org.apache.thrift.meta_data.FieldMetaData("verifiedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAccount.class, metaDataMap);
  }

  public TAccount() {
  }

  public TAccount(
    int id,
    String username,
    String displayname,
    String password,
    String status,
    String avatarURL,
    String note,
    String address,
    String phone,
    String platform,
    long lastedLogin,
    long verifiedAt,
    String createdAt,
    String updatedAt)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.username = username;
    this.displayname = displayname;
    this.password = password;
    this.status = status;
    this.avatarURL = avatarURL;
    this.note = note;
    this.address = address;
    this.phone = phone;
    this.platform = platform;
    this.lastedLogin = lastedLogin;
    setLastedLoginIsSet(true);
    this.verifiedAt = verifiedAt;
    setVerifiedAtIsSet(true);
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAccount(TAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetDisplayname()) {
      this.displayname = other.displayname;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetAvatarURL()) {
      this.avatarURL = other.avatarURL;
    }
    if (other.isSetNote()) {
      this.note = other.note;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    this.lastedLogin = other.lastedLogin;
    this.verifiedAt = other.verifiedAt;
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    if (other.isSetUpdatedAt()) {
      this.updatedAt = other.updatedAt;
    }
  }

  public TAccount deepCopy() {
    return new TAccount(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.username = null;
    this.displayname = null;
    this.password = null;
    this.status = null;
    this.avatarURL = null;
    this.note = null;
    this.address = null;
    this.phone = null;
    this.platform = null;
    setLastedLoginIsSet(false);
    this.lastedLogin = 0;
    setVerifiedAtIsSet(false);
    this.verifiedAt = 0;
    this.createdAt = null;
    this.updatedAt = null;
  }

  public int getId() {
    return this.id;
  }

  public TAccount setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getUsername() {
    return this.username;
  }

  public TAccount setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getDisplayname() {
    return this.displayname;
  }

  public TAccount setDisplayname(String displayname) {
    this.displayname = displayname;
    return this;
  }

  public void unsetDisplayname() {
    this.displayname = null;
  }

  /** Returns true if field displayname is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayname() {
    return this.displayname != null;
  }

  public void setDisplaynameIsSet(boolean value) {
    if (!value) {
      this.displayname = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public TAccount setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public TAccount setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getAvatarURL() {
    return this.avatarURL;
  }

  public TAccount setAvatarURL(String avatarURL) {
    this.avatarURL = avatarURL;
    return this;
  }

  public void unsetAvatarURL() {
    this.avatarURL = null;
  }

  /** Returns true if field avatarURL is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarURL() {
    return this.avatarURL != null;
  }

  public void setAvatarURLIsSet(boolean value) {
    if (!value) {
      this.avatarURL = null;
    }
  }

  public String getNote() {
    return this.note;
  }

  public TAccount setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public TAccount setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public TAccount setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getPlatform() {
    return this.platform;
  }

  public TAccount setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public long getLastedLogin() {
    return this.lastedLogin;
  }

  public TAccount setLastedLogin(long lastedLogin) {
    this.lastedLogin = lastedLogin;
    setLastedLoginIsSet(true);
    return this;
  }

  public void unsetLastedLogin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTEDLOGIN_ISSET_ID);
  }

  /** Returns true if field lastedLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetLastedLogin() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTEDLOGIN_ISSET_ID);
  }

  public void setLastedLoginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTEDLOGIN_ISSET_ID, value);
  }

  public long getVerifiedAt() {
    return this.verifiedAt;
  }

  public TAccount setVerifiedAt(long verifiedAt) {
    this.verifiedAt = verifiedAt;
    setVerifiedAtIsSet(true);
    return this;
  }

  public void unsetVerifiedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERIFIEDAT_ISSET_ID);
  }

  /** Returns true if field verifiedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifiedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __VERIFIEDAT_ISSET_ID);
  }

  public void setVerifiedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERIFIEDAT_ISSET_ID, value);
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public TAccount setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public String getUpdatedAt() {
    return this.updatedAt;
  }

  public TAccount setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  public void unsetUpdatedAt() {
    this.updatedAt = null;
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return this.updatedAt != null;
  }

  public void setUpdatedAtIsSet(boolean value) {
    if (!value) {
      this.updatedAt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case DISPLAYNAME:
      if (value == null) {
        unsetDisplayname();
      } else {
        setDisplayname((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case AVATAR_URL:
      if (value == null) {
        unsetAvatarURL();
      } else {
        setAvatarURL((String)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case LASTED_LOGIN:
      if (value == null) {
        unsetLastedLogin();
      } else {
        setLastedLogin((Long)value);
      }
      break;

    case VERIFIED_AT:
      if (value == null) {
        unsetVerifiedAt();
      } else {
        setVerifiedAt((Long)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USERNAME:
      return getUsername();

    case DISPLAYNAME:
      return getDisplayname();

    case PASSWORD:
      return getPassword();

    case STATUS:
      return getStatus();

    case AVATAR_URL:
      return getAvatarURL();

    case NOTE:
      return getNote();

    case ADDRESS:
      return getAddress();

    case PHONE:
      return getPhone();

    case PLATFORM:
      return getPlatform();

    case LASTED_LOGIN:
      return getLastedLogin();

    case VERIFIED_AT:
      return getVerifiedAt();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USERNAME:
      return isSetUsername();
    case DISPLAYNAME:
      return isSetDisplayname();
    case PASSWORD:
      return isSetPassword();
    case STATUS:
      return isSetStatus();
    case AVATAR_URL:
      return isSetAvatarURL();
    case NOTE:
      return isSetNote();
    case ADDRESS:
      return isSetAddress();
    case PHONE:
      return isSetPhone();
    case PLATFORM:
      return isSetPlatform();
    case LASTED_LOGIN:
      return isSetLastedLogin();
    case VERIFIED_AT:
      return isSetVerifiedAt();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAccount)
      return this.equals((TAccount)that);
    return false;
  }

  public boolean equals(TAccount that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_displayname = true && this.isSetDisplayname();
    boolean that_present_displayname = true && that.isSetDisplayname();
    if (this_present_displayname || that_present_displayname) {
      if (!(this_present_displayname && that_present_displayname))
        return false;
      if (!this.displayname.equals(that.displayname))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_avatarURL = true && this.isSetAvatarURL();
    boolean that_present_avatarURL = true && that.isSetAvatarURL();
    if (this_present_avatarURL || that_present_avatarURL) {
      if (!(this_present_avatarURL && that_present_avatarURL))
        return false;
      if (!this.avatarURL.equals(that.avatarURL))
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_lastedLogin = true;
    boolean that_present_lastedLogin = true;
    if (this_present_lastedLogin || that_present_lastedLogin) {
      if (!(this_present_lastedLogin && that_present_lastedLogin))
        return false;
      if (this.lastedLogin != that.lastedLogin)
        return false;
    }

    boolean this_present_verifiedAt = true;
    boolean that_present_verifiedAt = true;
    if (this_present_verifiedAt || that_present_verifiedAt) {
      if (!(this_present_verifiedAt && that_present_verifiedAt))
        return false;
      if (this.verifiedAt != that.verifiedAt)
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_updatedAt = true && this.isSetUpdatedAt();
    boolean that_present_updatedAt = true && that.isSetUpdatedAt();
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (!this.updatedAt.equals(that.updatedAt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_displayname = true && (isSetDisplayname());
    list.add(present_displayname);
    if (present_displayname)
      list.add(displayname);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_avatarURL = true && (isSetAvatarURL());
    list.add(present_avatarURL);
    if (present_avatarURL)
      list.add(avatarURL);

    boolean present_note = true && (isSetNote());
    list.add(present_note);
    if (present_note)
      list.add(note);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_platform = true && (isSetPlatform());
    list.add(present_platform);
    if (present_platform)
      list.add(platform);

    boolean present_lastedLogin = true;
    list.add(present_lastedLogin);
    if (present_lastedLogin)
      list.add(lastedLogin);

    boolean present_verifiedAt = true;
    list.add(present_verifiedAt);
    if (present_verifiedAt)
      list.add(verifiedAt);

    boolean present_createdAt = true && (isSetCreatedAt());
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_updatedAt = true && (isSetUpdatedAt());
    list.add(present_updatedAt);
    if (present_updatedAt)
      list.add(updatedAt);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayname()).compareTo(other.isSetDisplayname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayname, other.displayname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarURL()).compareTo(other.isSetAvatarURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarURL, other.avatarURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastedLogin()).compareTo(other.isSetLastedLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastedLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastedLogin, other.lastedLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerifiedAt()).compareTo(other.isSetVerifiedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifiedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifiedAt, other.verifiedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAccount(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayname:");
    if (this.displayname == null) {
      sb.append("null");
    } else {
      sb.append(this.displayname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatarURL:");
    if (this.avatarURL == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("note:");
    if (this.note == null) {
      sb.append("null");
    } else {
      sb.append(this.note);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platform:");
    if (this.platform == null) {
      sb.append("null");
    } else {
      sb.append(this.platform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastedLogin:");
    sb.append(this.lastedLogin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("verifiedAt:");
    sb.append(this.verifiedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    if (this.updatedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updatedAt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAccountStandardSchemeFactory implements SchemeFactory {
    public TAccountStandardScheme getScheme() {
      return new TAccountStandardScheme();
    }
  }

  private static class TAccountStandardScheme extends StandardScheme<TAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISPLAYNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayname = iprot.readString();
              struct.setDisplaynameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AVATAR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatarURL = iprot.readString();
              struct.setAvatarURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LASTED_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastedLogin = iprot.readI64();
              struct.setLastedLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VERIFIED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.verifiedAt = iprot.readI64();
              struct.setVerifiedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatedAt = iprot.readString();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.displayname != null) {
        oprot.writeFieldBegin(DISPLAYNAME_FIELD_DESC);
        oprot.writeString(struct.displayname);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.avatarURL != null) {
        oprot.writeFieldBegin(AVATAR_URL_FIELD_DESC);
        oprot.writeString(struct.avatarURL);
        oprot.writeFieldEnd();
      }
      if (struct.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        oprot.writeString(struct.note);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.platform != null) {
        oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
        oprot.writeString(struct.platform);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LASTED_LOGIN_FIELD_DESC);
      oprot.writeI64(struct.lastedLogin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERIFIED_AT_FIELD_DESC);
      oprot.writeI64(struct.verifiedAt);
      oprot.writeFieldEnd();
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.updatedAt != null) {
        oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
        oprot.writeString(struct.updatedAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAccountTupleSchemeFactory implements SchemeFactory {
    public TAccountTupleScheme getScheme() {
      return new TAccountTupleScheme();
    }
  }

  private static class TAccountTupleScheme extends TupleScheme<TAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetDisplayname()) {
        optionals.set(2);
      }
      if (struct.isSetPassword()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetAvatarURL()) {
        optionals.set(5);
      }
      if (struct.isSetNote()) {
        optionals.set(6);
      }
      if (struct.isSetAddress()) {
        optionals.set(7);
      }
      if (struct.isSetPhone()) {
        optionals.set(8);
      }
      if (struct.isSetPlatform()) {
        optionals.set(9);
      }
      if (struct.isSetLastedLogin()) {
        optionals.set(10);
      }
      if (struct.isSetVerifiedAt()) {
        optionals.set(11);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(12);
      }
      if (struct.isSetUpdatedAt()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetDisplayname()) {
        oprot.writeString(struct.displayname);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetAvatarURL()) {
        oprot.writeString(struct.avatarURL);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetLastedLogin()) {
        oprot.writeI64(struct.lastedLogin);
      }
      if (struct.isSetVerifiedAt()) {
        oprot.writeI64(struct.verifiedAt);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeString(struct.createdAt);
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeString(struct.updatedAt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.displayname = iprot.readString();
        struct.setDisplaynameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.avatarURL = iprot.readString();
        struct.setAvatarURLIsSet(true);
      }
      if (incoming.get(6)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(7)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(9)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastedLogin = iprot.readI64();
        struct.setLastedLoginIsSet(true);
      }
      if (incoming.get(11)) {
        struct.verifiedAt = iprot.readI64();
        struct.setVerifiedAtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createdAt = iprot.readString();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updatedAt = iprot.readString();
        struct.setUpdatedAtIsSet(true);
      }
    }
  }

}

