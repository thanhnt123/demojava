/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.demoproject.thrift.account;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-02-25")
public class TAccountListResult implements org.apache.thrift.TBase<TAccountListResult, TAccountListResult._Fields>, java.io.Serializable, Cloneable, Comparable<TAccountListResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAccountListResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIST_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("listData", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRecords", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAccountListResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAccountListResultTupleSchemeFactory());
  }

  /**
   * 
   * @see com.demoproject.thrift.tcommon.EStatusResult
   */
  public com.demoproject.thrift.tcommon.EStatusResult status; // required
  public List<TAccount> listData; // required
  public long totalRecords; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.demoproject.thrift.tcommon.EStatusResult
     */
    STATUS((short)1, "status"),
    LIST_DATA((short)2, "listData"),
    TOTAL_RECORDS((short)4, "totalRecords");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // LIST_DATA
          return LIST_DATA;
        case 4: // TOTAL_RECORDS
          return TOTAL_RECORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALRECORDS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.demoproject.thrift.tcommon.EStatusResult.class)));
    tmpMap.put(_Fields.LIST_DATA, new org.apache.thrift.meta_data.FieldMetaData("listData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccount.class))));
    tmpMap.put(_Fields.TOTAL_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("totalRecords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAccountListResult.class, metaDataMap);
  }

  public TAccountListResult() {
    this.status = com.demoproject.thrift.tcommon.EStatusResult.OK;

  }

  public TAccountListResult(
    com.demoproject.thrift.tcommon.EStatusResult status,
    List<TAccount> listData,
    long totalRecords)
  {
    this();
    this.status = status;
    this.listData = listData;
    this.totalRecords = totalRecords;
    setTotalRecordsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAccountListResult(TAccountListResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetListData()) {
      List<TAccount> __this__listData = new ArrayList<TAccount>(other.listData.size());
      for (TAccount other_element : other.listData) {
        __this__listData.add(new TAccount(other_element));
      }
      this.listData = __this__listData;
    }
    this.totalRecords = other.totalRecords;
  }

  public TAccountListResult deepCopy() {
    return new TAccountListResult(this);
  }

  @Override
  public void clear() {
    this.status = com.demoproject.thrift.tcommon.EStatusResult.OK;

    this.listData = null;
    setTotalRecordsIsSet(false);
    this.totalRecords = 0;
  }

  /**
   * 
   * @see com.demoproject.thrift.tcommon.EStatusResult
   */
  public com.demoproject.thrift.tcommon.EStatusResult getStatus() {
    return this.status;
  }

  /**
   * 
   * @see com.demoproject.thrift.tcommon.EStatusResult
   */
  public TAccountListResult setStatus(com.demoproject.thrift.tcommon.EStatusResult status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getListDataSize() {
    return (this.listData == null) ? 0 : this.listData.size();
  }

  public java.util.Iterator<TAccount> getListDataIterator() {
    return (this.listData == null) ? null : this.listData.iterator();
  }

  public void addToListData(TAccount elem) {
    if (this.listData == null) {
      this.listData = new ArrayList<TAccount>();
    }
    this.listData.add(elem);
  }

  public List<TAccount> getListData() {
    return this.listData;
  }

  public TAccountListResult setListData(List<TAccount> listData) {
    this.listData = listData;
    return this;
  }

  public void unsetListData() {
    this.listData = null;
  }

  /** Returns true if field listData is set (has been assigned a value) and false otherwise */
  public boolean isSetListData() {
    return this.listData != null;
  }

  public void setListDataIsSet(boolean value) {
    if (!value) {
      this.listData = null;
    }
  }

  public long getTotalRecords() {
    return this.totalRecords;
  }

  public TAccountListResult setTotalRecords(long totalRecords) {
    this.totalRecords = totalRecords;
    setTotalRecordsIsSet(true);
    return this;
  }

  public void unsetTotalRecords() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALRECORDS_ISSET_ID);
  }

  /** Returns true if field totalRecords is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRecords() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALRECORDS_ISSET_ID);
  }

  public void setTotalRecordsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALRECORDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.demoproject.thrift.tcommon.EStatusResult)value);
      }
      break;

    case LIST_DATA:
      if (value == null) {
        unsetListData();
      } else {
        setListData((List<TAccount>)value);
      }
      break;

    case TOTAL_RECORDS:
      if (value == null) {
        unsetTotalRecords();
      } else {
        setTotalRecords((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case LIST_DATA:
      return getListData();

    case TOTAL_RECORDS:
      return getTotalRecords();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case LIST_DATA:
      return isSetListData();
    case TOTAL_RECORDS:
      return isSetTotalRecords();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAccountListResult)
      return this.equals((TAccountListResult)that);
    return false;
  }

  public boolean equals(TAccountListResult that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_listData = true && this.isSetListData();
    boolean that_present_listData = true && that.isSetListData();
    if (this_present_listData || that_present_listData) {
      if (!(this_present_listData && that_present_listData))
        return false;
      if (!this.listData.equals(that.listData))
        return false;
    }

    boolean this_present_totalRecords = true;
    boolean that_present_totalRecords = true;
    if (this_present_totalRecords || that_present_totalRecords) {
      if (!(this_present_totalRecords && that_present_totalRecords))
        return false;
      if (this.totalRecords != that.totalRecords)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_listData = true && (isSetListData());
    list.add(present_listData);
    if (present_listData)
      list.add(listData);

    boolean present_totalRecords = true;
    list.add(present_totalRecords);
    if (present_totalRecords)
      list.add(totalRecords);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAccountListResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListData()).compareTo(other.isSetListData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listData, other.listData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalRecords()).compareTo(other.isSetTotalRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRecords, other.totalRecords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAccountListResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listData:");
    if (this.listData == null) {
      sb.append("null");
    } else {
      sb.append(this.listData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalRecords:");
    sb.append(this.totalRecords);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAccountListResultStandardSchemeFactory implements SchemeFactory {
    public TAccountListResultStandardScheme getScheme() {
      return new TAccountListResultStandardScheme();
    }
  }

  private static class TAccountListResultStandardScheme extends StandardScheme<TAccountListResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAccountListResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.demoproject.thrift.tcommon.EStatusResult.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIST_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.listData = new ArrayList<TAccount>(_list0.size);
                TAccount _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TAccount();
                  _elem1.read(iprot);
                  struct.listData.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setListDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalRecords = iprot.readI64();
              struct.setTotalRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAccountListResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.listData != null) {
        oprot.writeFieldBegin(LIST_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listData.size()));
          for (TAccount _iter3 : struct.listData)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_RECORDS_FIELD_DESC);
      oprot.writeI64(struct.totalRecords);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAccountListResultTupleSchemeFactory implements SchemeFactory {
    public TAccountListResultTupleScheme getScheme() {
      return new TAccountListResultTupleScheme();
    }
  }

  private static class TAccountListResultTupleScheme extends TupleScheme<TAccountListResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAccountListResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetListData()) {
        optionals.set(1);
      }
      if (struct.isSetTotalRecords()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetListData()) {
        {
          oprot.writeI32(struct.listData.size());
          for (TAccount _iter4 : struct.listData)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetTotalRecords()) {
        oprot.writeI64(struct.totalRecords);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAccountListResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.status = com.demoproject.thrift.tcommon.EStatusResult.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.listData = new ArrayList<TAccount>(_list5.size);
          TAccount _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TAccount();
            _elem6.read(iprot);
            struct.listData.add(_elem6);
          }
        }
        struct.setListDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalRecords = iprot.readI64();
        struct.setTotalRecordsIsSet(true);
      }
    }
  }

}

